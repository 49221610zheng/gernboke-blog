name: Simple CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  NODE_VERSION: '18'

jobs:
  # ‰ª£Á†ÅË¥®ÈáèÊ£ÄÊü•
  lint_and_test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci || npm install
        npm install -g firebase-tools
        
    - name: Validate configuration
      run: |
        if [ -f "scripts/validate-config.js" ]; then
          node scripts/validate-config.js || echo "Config validation skipped"
        fi
        
    - name: Run linting
      run: |
        if [ -f ".eslintrc.js" ]; then
          npm run lint || echo "Linting skipped"
        fi

  # È¢ÑËßàÈÉ®ÁΩ≤ (‰ªÖPR)
  deploy_preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: lint_and_test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install Firebase CLI
      run: npm install -g firebase-tools
      
    - name: Deploy to preview channel
      run: |
        if [ -n "${{ secrets.FIREBASE_PROJECT_ID }}" ] && [ -n "${{ secrets.FIREBASE_TOKEN }}" ]; then
          firebase hosting:channel:deploy pr-${{ github.event.number }} \
            --project ${{ secrets.FIREBASE_PROJECT_ID }} \
            --token ${{ secrets.FIREBASE_TOKEN }} \
            --expires 7d
        else
          echo "‚ö†Ô∏è Firebase secrets not configured, skipping preview deployment"
        fi
        
    - name: Comment PR with preview URL
      if: success()
      uses: actions/github-script@v7
      with:
        script: |
          const projectId = process.env.FIREBASE_PROJECT_ID;
          if (!projectId) {
            console.log('Firebase project ID not available');
            return;
          }
          
          const prNumber = context.payload.pull_request.number;
          const commitSha = context.payload.pull_request.head.sha;
          const previewUrl = `https://${projectId}--pr-${prNumber}-${commitSha.substring(0, 7)}.web.app`;
          
          const comment = `## üöÄ Preview Deployment Ready!
          
          üì± **Preview URL**: ${previewUrl}
          
          ### üìä Details
          - **PR**: #${prNumber}
          - **Commit**: \`${commitSha.substring(0, 7)}\`
          - **Expires**: 7 days
          
          ---
          *Preview will be automatically deleted after 7 days.*`;
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
      env:
        FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}

  # Áîü‰∫ßÈÉ®ÁΩ≤ (‰ªÖmainÂàÜÊîØ)
  deploy_production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: lint_and_test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install Firebase CLI
      run: npm install -g firebase-tools
      
    - name: Validate Firebase configuration
      run: |
        if [ -z "${{ secrets.FIREBASE_PROJECT_ID }}" ] || [ -z "${{ secrets.FIREBASE_TOKEN }}" ]; then
          echo "‚ùå Firebase secrets not configured"
          echo "Please configure FIREBASE_PROJECT_ID and FIREBASE_TOKEN in repository secrets"
          exit 1
        fi
        echo "‚úÖ Firebase configuration validated"
        
    - name: Deploy to Firebase Hosting
      run: |
        echo "üöÄ Deploying to production..."
        firebase deploy \
          --project ${{ secrets.FIREBASE_PROJECT_ID }} \
          --token ${{ secrets.FIREBASE_TOKEN }} \
          --force
          
    - name: Verify deployment
      run: |
        echo "üîç Verifying deployment..."
        sleep 30
        
        # Âü∫Êú¨ÂÅ•Â∫∑Ê£ÄÊü•
        PROJECT_URL="https://${{ secrets.FIREBASE_PROJECT_ID }}.web.app"
        if curl -f "$PROJECT_URL" > /dev/null 2>&1; then
          echo "‚úÖ Website is accessible: $PROJECT_URL"
        else
          echo "‚ö†Ô∏è Website accessibility check failed"
        fi
        
    - name: Create release tag
      if: success()
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        TAG_NAME="v$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)"
        git tag $TAG_NAME
        git push origin $TAG_NAME
        
        echo "üè∑Ô∏è Created release tag: $TAG_NAME"
        
    - name: Deployment summary
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "üéâ Production deployment successful!"
          echo "üåê Live URL: https://${{ secrets.FIREBASE_PROJECT_ID }}.web.app"
        else
          echo "‚ùå Production deployment failed!"
        fi
