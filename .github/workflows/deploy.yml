name: CI/CD Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'

jobs:
  # 代码质量检查
  code_quality:
    name: Code Quality Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npm install -g firebase-tools

    - name: Lint code
      run: npm run lint

    - name: Format check
      run: npm run format:check

    - name: Validate configuration
      run: npm run validate

    - name: Security audit
      run: npm audit --audit-level moderate

    - name: Upload lint results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lint-results
        path: |
          eslint-report.json
          prettier-report.json

  # 单元测试
  unit_tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code_quality

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests
      run: npm run test:coverage

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: |
          coverage/
          test-results/

  # 端到端测试
  e2e_tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: code_quality

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npx playwright install --with-deps

    - name: Start Firebase emulators
      run: |
        npm install -g firebase-tools
        firebase emulators:start --only firestore,auth,storage &
        sleep 10

    - name: Start development server
      run: |
        npm run serve &
        sleep 5

    - name: Run E2E tests
      run: npm run test:e2e

    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: |
          test-results/
          playwright-report/

  # 性能和可访问性测试
  performance_tests:
    name: Performance & Accessibility Tests
    runs-on: ubuntu-latest
    needs: [unit_tests, e2e_tests]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Start development server
      run: |
        npm run serve &
        sleep 5

    - name: Run Lighthouse tests
      run: npm run test:lighthouse

    - name: Run accessibility tests
      run: npm run test:accessibility

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: |
          lighthouse-results/
          accessibility-results/

  # 预览部署
  deploy_preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [unit_tests, e2e_tests]
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npm install -g firebase-tools

    - name: Validate Firebase configuration
      run: |
        if [ ! -f "js/firebase-config.js" ]; then
          echo "❌ Firebase configuration file not found"
          exit 1
        fi

        if grep -q "YOUR_API_KEY" js/firebase-config.js; then
          echo "❌ Firebase configuration contains placeholders"
          exit 1
        fi

        echo "✅ Firebase configuration validated"

    - name: Deploy to preview channel
      run: |
        firebase hosting:channel:deploy pr-${{ github.event.number }} \
          --project ${{ secrets.FIREBASE_PROJECT_ID }} \
          --token ${{ secrets.FIREBASE_TOKEN }} \
          --expires 7d

    - name: Comment PR with preview URL
      uses: actions/github-script@v7
      with:
        script: |
          const projectId = process.env.FIREBASE_PROJECT_ID || 'your-project-id';
          const prNumber = context.payload.pull_request.number;
          const commitSha = context.payload.pull_request.head.sha;
          const branch = context.payload.pull_request.head.ref;

          const previewUrl = `https://${projectId}--pr-${prNumber}-${commitSha.substring(0, 7)}.web.app`;

          const comment = `## 🚀 Preview Deployment Ready!

          📱 **Preview URL**: ${previewUrl}

          ### 📊 Deployment Details
          - **Branch**: \`${branch}\`
          - **Commit**: \`${commitSha.substring(0, 7)}\`
          - **Environment**: Preview
          - **Expires**: 7 days

          ### 🧪 Test Results
          - Unit Tests: ✅ Passed
          - E2E Tests: ✅ Passed

          ---
          *This preview will be automatically deleted after 7 days.*`;

          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
      env:
        FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}

  # 生产部署
  deploy_production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [unit_tests, e2e_tests, performance_tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event.inputs.environment == 'production'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npm install -g firebase-tools

    - name: Validate production configuration
      run: |
        npm run validate

        # 检查生产环境特定配置
        if [ ! -f "js/config/production.js" ]; then
          echo "⚠️ Production configuration not found, using default"
        fi

        echo "✅ Production configuration validated"

    - name: Run pre-deployment checks
      run: |
        echo "🔍 Running pre-deployment checks..."

        # 检查Firebase项目配置
        firebase projects:list --token ${{ secrets.FIREBASE_TOKEN }}

        # 验证安全规则
        firebase firestore:rules:get --project ${{ secrets.FIREBASE_PROJECT_ID }} --token ${{ secrets.FIREBASE_TOKEN }}

        echo "✅ Pre-deployment checks passed"

    - name: Deploy to Firebase Hosting
      run: |
        echo "🚀 Deploying to production..."

        firebase deploy \
          --project ${{ secrets.FIREBASE_PROJECT_ID }} \
          --token ${{ secrets.FIREBASE_TOKEN }} \
          --force

    - name: Run post-deployment tests
      run: |
        echo "🧪 Running post-deployment tests..."

        # 等待部署完成
        sleep 30

        # 检查网站可访问性
        curl -f https://${{ secrets.FIREBASE_PROJECT_ID }}.web.app || exit 1
        curl -f https://${{ secrets.FIREBASE_PROJECT_ID }}.web.app/admin || exit 1

        echo "✅ Post-deployment tests passed"

    - name: Create deployment tag
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        TAG_NAME="v$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)"
        git tag $TAG_NAME
        git push origin $TAG_NAME

    - name: Notify deployment success
      uses: actions/github-script@v7
      if: success()
      with:
        script: |
          const projectId = process.env.FIREBASE_PROJECT_ID || 'your-project-id';
          const deploymentUrl = `https://${projectId}.web.app`;

          // 如果是PR合并触发的部署，在PR中评论
          if (context.payload.head_commit) {
            const commit = context.payload.head_commit;
            console.log(`🎉 Production deployment successful!`);
            console.log(`🌐 Live URL: ${deploymentUrl}`);
            console.log(`📝 Commit: ${commit.message}`);
          }
      env:
        FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}

    - name: Notify deployment failure
      uses: actions/github-script@v7
      if: failure()
      with:
        script: |
          console.log(`❌ Production deployment failed!`);
          console.log(`🔍 Check the logs for more details.`);

  # 部署到暂存环境
  deploy_staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [unit_tests, e2e_tests]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npm install -g firebase-tools

    - name: Deploy to staging
      run: |
        firebase hosting:channel:deploy staging \
          --project ${{ secrets.FIREBASE_PROJECT_ID }} \
          --token ${{ secrets.FIREBASE_TOKEN }} \
          --expires 30d
